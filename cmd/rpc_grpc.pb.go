// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcClient is the client API for Rpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcClient interface {
	GenSessiontoPeer(ctx context.Context, in *GenSessionCmd, opts ...grpc.CallOption) (*Res, error)
	RegisterProxy(ctx context.Context, in *RegProxyCmd, opts ...grpc.CallOption) (*Res, error)
	ExtendSession(ctx context.Context, in *ExtendCmd, opts ...grpc.CallOption) (*Res, error)
	SendRelayMsg(ctx context.Context, in *RelayMsg, opts ...grpc.CallOption) (*Res, error)
	GenCircuit(ctx context.Context, in *GenCircuitCmd, opts ...grpc.CallOption) (*Res, error)
	GossipJoint(ctx context.Context, in *GossipMsg, opts ...grpc.CallOption) (*Res, error)
}

type rpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcClient(cc grpc.ClientConnInterface) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) GenSessiontoPeer(ctx context.Context, in *GenSessionCmd, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/main.Rpc/GenSessiontoPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) RegisterProxy(ctx context.Context, in *RegProxyCmd, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/main.Rpc/RegisterProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) ExtendSession(ctx context.Context, in *ExtendCmd, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/main.Rpc/ExtendSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) SendRelayMsg(ctx context.Context, in *RelayMsg, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/main.Rpc/SendRelayMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GenCircuit(ctx context.Context, in *GenCircuitCmd, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/main.Rpc/GenCircuit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GossipJoint(ctx context.Context, in *GossipMsg, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/main.Rpc/GossipJoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcServer is the server API for Rpc service.
// All implementations must embed UnimplementedRpcServer
// for forward compatibility
type RpcServer interface {
	GenSessiontoPeer(context.Context, *GenSessionCmd) (*Res, error)
	RegisterProxy(context.Context, *RegProxyCmd) (*Res, error)
	ExtendSession(context.Context, *ExtendCmd) (*Res, error)
	SendRelayMsg(context.Context, *RelayMsg) (*Res, error)
	GenCircuit(context.Context, *GenCircuitCmd) (*Res, error)
	GossipJoint(context.Context, *GossipMsg) (*Res, error)
	mustEmbedUnimplementedRpcServer()
}

// UnimplementedRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRpcServer struct {
}

func (UnimplementedRpcServer) GenSessiontoPeer(context.Context, *GenSessionCmd) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenSessiontoPeer not implemented")
}
func (UnimplementedRpcServer) RegisterProxy(context.Context, *RegProxyCmd) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProxy not implemented")
}
func (UnimplementedRpcServer) ExtendSession(context.Context, *ExtendCmd) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendSession not implemented")
}
func (UnimplementedRpcServer) SendRelayMsg(context.Context, *RelayMsg) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRelayMsg not implemented")
}
func (UnimplementedRpcServer) GenCircuit(context.Context, *GenCircuitCmd) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenCircuit not implemented")
}
func (UnimplementedRpcServer) GossipJoint(context.Context, *GossipMsg) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GossipJoint not implemented")
}
func (UnimplementedRpcServer) mustEmbedUnimplementedRpcServer() {}

// UnsafeRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcServer will
// result in compilation errors.
type UnsafeRpcServer interface {
	mustEmbedUnimplementedRpcServer()
}

func RegisterRpcServer(s grpc.ServiceRegistrar, srv RpcServer) {
	s.RegisterService(&Rpc_ServiceDesc, srv)
}

func _Rpc_GenSessiontoPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenSessionCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GenSessiontoPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Rpc/GenSessiontoPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GenSessiontoPeer(ctx, req.(*GenSessionCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_RegisterProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegProxyCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).RegisterProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Rpc/RegisterProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).RegisterProxy(ctx, req.(*RegProxyCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_ExtendSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).ExtendSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Rpc/ExtendSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).ExtendSession(ctx, req.(*ExtendCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_SendRelayMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).SendRelayMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Rpc/SendRelayMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).SendRelayMsg(ctx, req.(*RelayMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GenCircuit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenCircuitCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GenCircuit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Rpc/GenCircuit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GenCircuit(ctx, req.(*GenCircuitCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GossipJoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GossipMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GossipJoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Rpc/GossipJoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GossipJoint(ctx, req.(*GossipMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Rpc_ServiceDesc is the grpc.ServiceDesc for Rpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenSessiontoPeer",
			Handler:    _Rpc_GenSessiontoPeer_Handler,
		},
		{
			MethodName: "RegisterProxy",
			Handler:    _Rpc_RegisterProxy_Handler,
		},
		{
			MethodName: "ExtendSession",
			Handler:    _Rpc_ExtendSession_Handler,
		},
		{
			MethodName: "SendRelayMsg",
			Handler:    _Rpc_SendRelayMsg_Handler,
		},
		{
			MethodName: "GenCircuit",
			Handler:    _Rpc_GenCircuit_Handler,
		},
		{
			MethodName: "GossipJoint",
			Handler:    _Rpc_GossipJoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
